apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: px-eks
  region: us-east-1
  version: "1.14"
managedNodeGroups:
  - name: kvdb-nodes
    instanceType: t2.large
    minSize: 3
    maxSize: 3
    desiredCapacity: 3
    #ami: auto
    amiFamily: AmazonLinux2
    labels: {role: worker, "portworx.io/metadata-node": "true", "portworx.io/node-type": "storage"}
    tags:
      nodegroup-role: worker-kvdbNode
    ssh:
      allow: true # will use ~/.ssh/id_rsa.pub as the default ssh key if "publicKeyPath" not specified
      publicKeyPath: ~/.ssh/aws-vm.pub
    #privateNetworking: false
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:<Policy-Name-to-allow-PX-creates-attaches-EBS-volumes>
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
        albIngress: true
        cloudWatch: true
  - name: storage-nodes
    instanceType: t2.large
    minSize: 6
    maxSize: 6
    desiredCapacity: 6
    #ami: auto
    amiFamily: AmazonLinux2
    labels: {role: worker, "portworx.io/node-type": "storage"}
    tags:
      nodegroup-role: worker-storage
    ssh:
      allow: true # will use ~/.ssh/id_rsa.pub as the default ssh key if "publicKeyPath" not specified
      publicKeyPath: ~/.ssh/aws-vm.pub
    #privateNetworking: false
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:<Policy-Name-to-allow-PX-creates-attaches-EBS-volumes>
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
        albIngress: true
        cloudWatch: true
  - name: storageless-nodes
    instanceType: t2.large
    minSize: 3
    maxSize: 6
    desiredCapacity: 3
    #ami: auto
    amiFamily: AmazonLinux2
    labels: {role: worker}
    tags:
      nodegroup-role: worker-storage-less
    ssh:
      allow: true # will use ~/.ssh/id_rsa.pub as the default ssh key if "publicKeyPath" not specified
      publicKeyPath: ~/.ssh/aws-vm.pub
    #privateNetworking: false
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:<Policy-Name-to-allow-PX-creates-attaches-EBS-volumes>
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
        albIngress: true
        cloudWatch: true
availabilityZones: [ 'us-east-1a', 'us-east-1b', 'us-east-1c' ]
